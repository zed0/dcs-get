#!/var/tmp/dcs-get/bin/node-0.4.2
//This is now the api. Exporting functions for fun and profit.

// Node modules
var 	http = require('http'),
	fs = require('fs'),
	util = require('util'),
	spawn = require('child_process').spawn,
	exec = require('child_process').exec,
	path = require( 'path' ),
	net = require( 'net' );

// Useful settings
var settings = {
	'socket': '/tmp/dcs-get.sock'
}

function getServerState(callback){
	var server = net.createConnection(settings['socket']);
	var response = '';
	server.setEncoding('utf8');
	server.on('connect', function(sock)
	{
		server.write('GETJSON', 'utf8');
	});
	server.on('data', function(data){
		response+=data;
	});
	server.on('end', function(){
		callback(JSON.parse(response));
	});
	server.on('error', function(err){
		console.log('error: '+err);
	});
}

exports.listPackages = function() {
	var package;
	getServerState(function(packages)
	{
		for (packageName in packages) {
			package = packages[packageName];
			if (package.type === undefined || package.type != "dev") {
				console.log(packageName+" - "+package.description+" - Versions: "+package.version.join(", "));
			}
		}
	});
}

exports.listPackagesDev = function() {
	var package;
	getServerState(function(packages)
	{
		for (packageName in packages) {
			package = packages[packageName];
			console.log(packageName+" - "+package.description+" - Versions: "+package.version.join(", "));
		}
	});
}

exports.listDownloading = function(callback) {
	var packageList = [];
	getServerState(function(packages)
	{
		for (packageName in packages) {
			package = packages[packageName];
			if (package.installed == 2 && package.downloaded != undefined) {
				packageList[packageName] = package;
			}
		}
		callback(packageList);
	});
}

exports.getProgress = function(package, callback){
	getServerState(function(packages)
	{
		if(packages[package] !== undefined)
		{
			callback(package, packages[package].downloaded, packages[package].totalSize);
		}
	});
}

exports.clean = function() {
	exec('rm -rf '+settings['install_dir']);
	console.log("dcs-get completely removed");
}

exports.search = function( pattern ) {
	getServerState( function( packages ) {
		packages.forEach( function( package ) {
			if( packages[package].indexOf( pattern ) != -1 || packages[package].description.indexOf( pattern ) != -1 ) {
				console.log( packages[package] + "-" + packages[package].description );
			}
		});
	});
}

exports.install = function( packageList ) {
	getServerState(function(packages){
		packageList.forEach( function ( package ) {
			var tmp = package.split( '-' );
			if ( tmp[1] != undefined ) {
				console.log( tmp[1] );
				installPackage( tmp[0], tmp[1] );
			}
			else if ( packages[tmp[0]] != undefined ) {
				console.log( packages[tmp[0]].version[0] );
				installPackage( tmp[0], packages[tmp[0]].version[0] );
			}
			else {
				console.log( "Package "+package+" does not exist." );
			}
		});
	});
}

exports.reinstall = function( packageList ) {
	getServerState(function(packages){
		packageList.forEach( function ( package ) {
			var tmp = package.split( '-' );
			if ( tmp[1] != undefined ) {
				reinstallPackage( tmp[0], tmp[1] );
			}
			else if ( packages[tmp[0]] != undefined ) {
				reinstallPackage( tmp[0], packages[tmp[0]].version[0] );
			}
			else {
				console.log( "Package "+package+" does not exist." );
			}
		});
	}
}

exports.listInstalled = function() {
	getServerState(function(packages){
		for (packageName in packages) {
			package = packages[packageName];
			if (package.installed) {
				console.log(packageName);
			}
		}
	});
}

exports.genSymlinks = function( packageList ) {
	packageList.forEach( function( package ) {
		genSymLinks( package );
	});
}

exports.package = function ( packageList ) {
	packageList.forEach( function ( package ) {
			packageFiles( package );
	});
}

exports.upload = function ( packageList ) {
	packageList.forEach( function ( package ) {
		uploadFiles( package );
	});
}

exports.help = function () {
	fs.readFile( 'help', encoding='utf8', function ( err, data ) {
		console.log( data );
	});
}

function uploadFiles( dir ) {
	var packageName = settings.install_dir+"/downloaded/"+dir+".tar.gz";
	fs.stat( packageName, function( err, stats ) {
		fs.readFile(packageName, function(err, data){
			if ( err || !stats.isFile() ) {
				console.log( err );
				return false;
			}
			else {
				var boundary = "gfyufgugvcibg";
				var options = {
					host: settings.base_host,
					port: 80,
					method: 'POST',
					path: settings.base_path+"uploader.php",
					headers: {
						"Content-type" : "multipart/form-data; boundary="+boundary
					}
				};
				var req = http.request( options, function( res ) {
					res.setEncoding('utf8');
					res.on( 'data', function( data ) {
						console.log( data );
					});

					res.on( 'end', function() {
						//console.log( "end" );
					});

					res.on( 'error', function( err ) {
						console.log( err );
					});
				
				});
				req.write('--'+boundary+'\r\n');
				req.write('Content-Disposition: form-data; name="foo"; filename="'+dir+'.tar.gz"\r\n');
				req.write('Content-Type: application/octet-stream\r\n\r\n');
				req.write(data+'\r\n');
				req.write('--'+boundary+'\r\n');
				req.write('Content-Disposition: form-data; name="upload"\r\n\r\n');
				req.write('Upload\r\n');
				req.write('--'+boundary+'--');
				req.end();
			}
		});
		return true;
	});
}

function genSymLinks( dir ) {
	var version = dir.split( "-" )[1];
	fs.stat( settings.install_dir+"/"+dir, function( err, stats ) {
		if ( stats.isDirectory() ) {
			var version = dir.split( "-" )[1];
			fs.readdir( settings.install_dir+"/"+dir+"/bin", function( err, files ) {
				files.forEach( function( file ) {
					fs.stat( settings.install_dir+"/"+dir+"/bin/"+file, function( err, stats ) {
						if ( file.charAt(0) != "." && stats.isFile() ) {	
							fs.symlink( settings.install_dir+"/"+dir+"/bin/"+file, settings.install_dir+"/bin/"+file );
							fs.symlink( settings.install_dir+"/"+dir+"/bin/"+file, settings.install_dir+"/bin/"+file+"-"+version );
						}
					});
				});
			});
			
			symDir( settings.install_dir+"/lib", settings.install_dir+"/"+dir+"/lib" );
			console.log( "Symlinks for "+dir+" generated" );
		} else {
			console.log( dir+" does not exist." );
		}
	});
}

function reinstallPackage( package, version ) {
	path.exists( settings.install_dir+"/"+package+"-"+version, function( exists ) {
 		if( exists ) {
			exec( "rm -rf "+settings.install_dir+"/"+package+"-"+version, function( err, stdout, stderr ) {
				if ( err ) console.log( err );
				installPackage( package, version );
			});
		}
		else {
			console.log( "Package "+package+"-"+version+" not installed. Installing now." );
			installPackage( package, version );
		}
	});
}	

function packageFiles( dir ) {
	var tarfiles = [];
	fs.stat( settings.install_dir+"/"+dir, function( err, stats ) {
		if ( stats.isDirectory() ) {
			tarfiles.push( dir );
			fs.readdir( settings.install_dir+'/bin/', function( err, files ) {
				files.forEach( function ( file ) {
					fs.lstat( settings.install_dir+'/bin/'+file, function( err, stats ) {
						if( file.charAt(0) != "." && stats.isSymbolicLink() ) {
							fs.readlink( settings.install_dir+'/bin/'+file, function( err, resolvedpath ) {
								if( resolvedpath.indexOf( settings.install_dir+"/"+dir ) == 0 ) {
									tarfiles.push( 'bin/'+file );
								}
							});
						}
					});
				});
			});
			tarfiles.concat( getSymsTo( 'lib', dir+"/lib" ) );
			exec( "tar czf "+settings.install_dir+"/downloaded/"+dir+".tar.gz "+settings.install_dir+"/"+tarfiles.join(" "+settings.install_dir+"/") , function ( err, stdout, stderr ) {
				if ( err ) console.log( err );
			});
		}
	});
}

function symDir ( fromDir, toDir ) {
	console.log( "From: "+fromDir,", To: "+toDir );
	fs.readdir( toDir, function( err, files ) {
		files.forEach( function( file ) {
			fs.stat( toDir+'/'+file, function( err, stats ) {
				if( file.charAt(0) != '.' ) {
					if ( stats.isFile() ) {
						fs.symlink( toDir+'/'+file, fromDir+'/'+file, function ( err ) {
							//if ( err ) console.log( err );
						});
					}
					else if ( stats.isDirectory() ) {
						console.log( fromDir+'/'+file );
						fs.stat( fromDir+'/'+file, function( err, stats ) {
							if ( stats == undefined ) {
								fs.mkdir( fromDir+'/'+file, '700', function( err ) {
									//if ( err ) console.log( err );
									symDir( fromDir+'/'+file, toDir+'/'+file );
								});
							}
						});
					}
				}
			});
		});
	});
}

function getSymsTo( from, to ) {
	var files = [];
	fs.readdir( settings.install_dir+'/'+from, function( err, files ) {
		if( files == undefined ) return;
		files.forEach( function ( file ) {
			if ( file.charAt(0) != "." ) {
				fs.lstat( settings.install_dir+'/'+from+'/'+file, function ( err, stats ) {
					if ( stats.isSymbolicLink() ) {
						fs.readlink( settings.install_dir+'/'+from+'/'+file, function( err, path ) {
							var old = settings.install_dir+'/'+to;
							if ( old.indexOf( path ) == 0 ) {
								files.push( from+'/'+file );
							}
						});
					}
					else if ( stats.isDirectory() ) {
						files = files.concat( getSymsTo( from+'/'+file, to ) );
					}
				});
			}
		});
	});
	return files;
}

function installPackage ( package, version ) {
	getServerState(function(packages){
		if ( packages[package].installed ) {
			console.log( "Already installed "+package+"-"+version );
			return true;
		}
		else if( packages[package].version.indexOf(version)==-1 ) {
			console.log( "No such package "+package+"-"+version );
			return false;
		}
		else {
			if( packages[package].dependencies != undefined ) {
				var deps = packages[package].dependencies;
				deps.forEach( function ( dependency ) {
					if( !isInstalled( dependency[0], dependency[1] ) ) {
						installPackage( dependency[0], dependency[1] );
					}
				});
			}

			if( packages[package].type == undefined || packages[package].type != "meta" ) {
				var server = net.createConnection(settings['socket']);
				server.setEncoding('utf8');
				server.on('connect', function(sock)
				{
					server.write('INSTALL '+package+'-'+version, 'utf8', function(){server.destroy()});
				});
				server.on('data', function(data){
					server.destroy();
				});
				server.on('error', function(err){
					console.log('error: '+err);
				});
			}
		}
	});
}
