#!/var/tmp/dcs-get/bin/node-0.4.2

// Useful settings
var settings = {
	'install_dir': '/var/tmp/dcs-get',
	'base_host': 'backus.uwcs.co.uk',
	'base_path': '/dcs-get/',
	'debug': true
};

// Global variable for packages
var packages;

// Directories to ignore when listing packages.
var ignore = ( "bin", "cleanup", "downloads", "downloaded", "lib", "home" );
// Node modules
var 	http = require('http'),
	fs = require('fs'),
	util = require('util'),
	spawn = require('child_process').spawn,
	exec = require('child_process').exec,
	path = require( 'path' );

// Grab the package list from backus
http.get({
	host: settings['base_host'],
	port: 80,
	path: settings['base_path']+'packages.json'
}, function(res) {
	res.setEncoding('utf8');
	var data = '';
	res.on('data', function (chunk) {
		data += chunk;
	});
	res.on('end', function () {
		try {
			packages = JSON.parse(data);
			packages = sortObject(packages);			
		} catch (e) {
			console.log("Error: Problem with package data");
			if (settings.debug) console.log(e);
			return;
		}
		// We have the package data and are ready to go
		handleCLI();
	});
}).on('error', function(e) {
	console.log("Error: Problem downloading package list from backus");
	if (settings.debug) console.log(e);

});

var handleCLI = function () {
	// Deal with command line input
	if (process.argv[2] === undefined) {
		console.log("Try dcs-get help");
		return;
	}
	switch (process.argv[2]) {
		case "list":
		case "l":
			var package;
			for (packageName in packages) {
				package = packages[packageName];
				if (package.type === undefined || package.type != "dev") {
					console.log(packageName+" - "+package.description+" - Versions: "+package.version.join(", "));
				}
			}
			break;
		case "list-dev":
		case "ld":
			var package;
			for (packageName in packages) {
				package = packages[packageName];
				console.log(packageName+" - "+package.description+" - Versions: "+package.version.join(", "));
			}
			break;
		case "clean":
		case "c":
			exec('rm -rf '+settings['install_dir']);
			console.log("dcs-get completely removed");
			break;
		case "search":
		case "s":
			exec( 'dcs-get l | grep ' + process.argv[3], function( err, stdout, stderr ) {
				if ( err ) console.log( err );
				console.log( stdout );
			});
			break;
		case "install":
		case "i":
			process.argv.shift();
			process.argv.shift();
			process.argv.shift();
			process.argv.forEach( function ( package ) {
				var tmp = package.split( '-' );
				if ( tmp[1] != undefined ) {
					console.log( tmp[1] );
					installPackage( tmp[0], tmp[1] );
				}
				else if ( packages[tmp[0]] != undefined ) {
					console.log( packages[tmp[0]].version[0] );
					installPackage( tmp[0], packages[tmp[0]].version[0] );
				}
				else {
					console.log( "Package "+package+" does not exist." );
				}
			});
			break;			
		case "reinstall":
		case "r":
			process.argv.shift();
			process.argv.shift();
			process.argv.shift();
			process.argv.forEach( function ( package ) {
				var tmp = package.split( '-' );
				if ( tmp[1] != undefined ) {
					reinstallPackage( tmp[0], tmp[1] );
				}
				else if ( packages[tmp[0]] != undefined ) {
					reinstallPackage( tmp[0], packages[tmp[0]].version[0] );
				}
				else {
					console.log( "Package "+package+" does not exist." );
				}
			});
			break;			
		case "list-installed":
		case "li":
			fs.readdir( settings.install_dir, function ( err, file ) {
				if ( ignore.indexOf( file ) == -1 ) {
					console.log( file );
				}
			});
			break;
		case "gensymlinks":
		case "g":
			genSymLinks( process.argv[3] );
			break;
		case "package":
		case "p":
			packageFiles( process.argv[3] );
			break;
		case "upload":
		case "u":
			uploadFiles( process.argv[3] );
			break;
		case "help":
			fs.readFile( 'help', encoding='utf8', function ( err, data ) {
				console.log( data );
			});
			break;
		case "commands":
			console.log("commands search install reinstall list list-dev clean gensymlinks package help upload");
			break;
		case "test":
			genSymLinks( dir );
			break;
		default:
			console.log("Try dcs-get help");
	}	
}

//TODO - MrWilson-- HOW I POST!?

function uploadFiles( dir ) {
	var packageName = settings.install_dir+"/downloaded/"+dir+".tar.gz";
	fs.stat( packageName, function( err, stats ) {
		if ( err || !stats.isFile() ) {
			console.log( err );
			return false;
		}
		else {
			var tmp = 0;

			var options = {
				host: settings.base_host,
				port: 80,
				method: 'POST',
				path: settings.base_path+"/uploader.php",
				headers: { "Content-Type" : "application/x-www-multipart" }
			};
			var req = http.request( options, function( res ) {
				//req.setEncoding( 'binary' );

				});
			});
			
			
		}
		req.end();
		return true;
	});
}

function genSymLinks( dir ) {
	var version = dir.split( "-" )[1];
	fs.stat( settings.install_dir+"/"+dir, function( err, stats ) {
		if ( stats.isDirectory() ) {
			var version = dir.split( "-" )[1];
			fs.readdir( settings.install_dir+"/"+dir+"/bin", function( err, files ) {
				files.forEach( function( file ) {
					fs.stat( settings.install_dir+"/"+dir+"/bin/"+file, function( err, stats ) {
						if ( file.charAt(0) != "." && stats.isFile() ) {	
							fs.symlink( settings.install_dir+"/"+dir+"/bin/"+file, settings.install_dir+"/bin/"+file );
							fs.symlink( settings.install_dir+"/"+dir+"/bin/"+file, settings.install_dir+"/bin/"+file+"-"+version );
						}
					});
				});
			});
			
			symDir( settings.install_dir+"/lib", settings.install_dir+"/"+dir+"/lib" );
			console.log( "Symlinks for "+dir+" generated" );
		} else {
			console.log( dir+" does not exist." );
		}
	});
}

function reinstallPackage( package, version ) {
	path.exists( settings.install_dir+"/"+package+"-"+version, function( exists ) {
 		if( exists ) {
			exec( "rm -rf "+settings.install_dir+"/"+package+"-"+version, function( err, stdout, stderr ) {
				if ( err ) console.log( err );
				installPackage( package, version );
			});
		}
		else {
			console.log( "Package "+package+"-"+version+" not installed. Installing now." );
			installPackage( package, version );
		}
	});
}	

function packageFiles( dir ) {
	var tarfiles = [];
	fs.stat( settings.install_dir+"/"+dir, function( err, stats ) {
		if ( stats.isDirectory() ) {
			tarfiles.push( dir );
			fs.readdir( settings.install_dir+'/bin/', function( err, files ) {
				files.forEach( function ( file ) {
					fs.lstat( settings.install_dir+'/bin/'+file, function( err, stats ) {
						if( file.charAt(0) != "." && stats.isSymbolicLink() ) {
							fs.readlink( settings.install_dir+'/bin/'+file, function( err, resolvedpath ) {
								if( resolvedpath.indexOf( settings.install_dir+"/"+dir ) == 0 ) {
									tarfiles.push( 'bin/'+file );
								}
							});
						}
					});
				});
			});
			tarfiles.concat( getSymsTo( 'lib', dir+"/lib" ) );
			exec( "tar czf "+settings.install_dir+"/downloaded/"+dir+".tar.gz "+settings.install_dir+"/"+tarfiles.join(" "+settings.install_dir+"/") , function ( err, stdout, stderr ) {
				if ( err ) console.log( err );
			});
		}
	});
}

function symDir ( fromDir, toDir ) {
	console.log( "From: "+fromDir,", To: "+toDir );
	fs.readdir( toDir, function( err, files ) {
		files.forEach( function( file ) {
			fs.stat( toDir+'/'+file, function( err, stats ) {
				if( file.charAt(0) != '.' ) {
					if ( stats.isFile() ) {
						fs.symlink( toDir+'/'+file, fromDir+'/'+file, function ( err ) {
							//if ( err ) console.log( err );
						});
					}
					else if ( stats.isDirectory() ) {
						console.log( fromDir+'/'+file );
						fs.stat( fromDir+'/'+file, function( err, stats ) {
							if ( stats == undefined ) {
								fs.mkdir( fromDir+'/'+file, '700', function( err ) {
									//if ( err ) console.log( err );
									symDir( fromDir+'/'+file, toDir+'/'+file );
								});
							}
						});
					}
				}
			});
		});
	});
}

function getSymsTo( from, to ) {
	var files = [];
	fs.readdir( settings.install_dir+'/'+from, function( err, files ) {
		if( files == undefined ) return;
		files.forEach( function ( file ) {
			if ( file.charAt(0) != "." ) {
				fs.lstat( settings.install_dir+'/'+from+'/'+file, function ( err, stats ) {
					if ( stats.isSymbolicLink() ) {
						fs.readlink( settings.install_dir+'/'+from+'/'+file, function( err, path ) {
							var old = settings.install_dir+'/'+to;
							if ( old.indexOf( path ) == 0 ) {
								files.push( from+'/'+file );
							}
						});
					}
					else if ( stats.isDirectory() ) {
						files = files.concat( getSymsTo( from+'/'+file, to ) );
					}
				});
			}
		});
	});
	return files;
}

function installPackage ( package, version ) {

	if ( isInstalled( package, version ) ) {
		console.log( "Already installed "+package+"-"+version );
		return true;
	}
	else if( packages[package].version != version ) {
		console.log( "No such package "+package+"-"+version );
		return false;
	}
	else {
		if( packages[package].dependencies != undefined ) {
			var deps = packages[package].dependencies;
			deps.forEach( function ( dependency ) {
				if( !isInstalled( dependency[0], dependency[1] ) ) {
					installPackage( dependency[0], dependency[1] );
				}
			});
		}

		if( packages[package].type == undefined || packages[package].type != "meta" ) {
			downloadPackage( package+"-"+version );
			fs.rename( settings.install_dir+"/downloads/"+package+"-"+version+".tar.gz", settings.install_dir+"/downloaded/"+package+"-"+version+".tar.gz", function ( err ) {
				if ( err ) console.log( err );
				else {
					console.log( "Installed "+package+"-"+version );
					return true;
				}
			});
		}
	}
}

// Function to download a file, while extracting it
// TODO: Add callbacks (progress and complete)
var downloadPackage = function (package) {
	http.get({
	        host: settings['base_host'],
        	port: 80,
	        path: settings['base_path']+'packages/'+package+'.tar.gz'
	}, function(res) {
		var downloaded = 0;
		res.on('data', function (chunk) {
			downloaded += chunk.length;
		});
		var progress = setInterval(function() {
			console.log(Math.round((downloaded/res.headers['content-length'])*100)+'%');
		}, 50);
		res.on('end', function () {
			clearInterval(progress);
			console.log("Package downloaded");
		});
		// Save file
		util.pump(res, fs.createWriteStream(settings['install_dir']+'/downloads/'+package+'.tar.gz'));
		// Extract contents
		var tar = spawn('tar', ['zx','-C', settings['install_dir']]);
		util.pump(res, tar.stdin);
		// Calculate md5sum
		var md5sum = spawn('md5sum');
		util.pump(res, md5sum.stdin);
		var md5hash = '';
		md5sum.stdout.on('data', function (chunk) {
			md5hash += chunk;
		})
		md5sum.stdout.on('end', function () {
			console.log("File hash: "+md5hash);
		});
	}).on('error', function(e) {
	        console.log("Error: Problem downloading package.");
        	if (settings.debug) console.log(e);
	});
}

//Utility functions and stuff

function isInstalled( package, version ) {
	return path.existsSync( settings.install_dir+"/"+package+"-"+version );
}
// Useful functions (not written by me)
function sortObject(o) {
    var sorted = {},
    key, a = [];

    for (key in o) {
        if (o.hasOwnProperty(key)) {
                a.push(key);
        }
    }

    a.sort();

    for (key = 0; key < a.length; key++) {
        sorted[a[key]] = o[a[key]];
    }
    return sorted;
}