#!/var/tmp/dcs-get/bin/node-0.4.2

/*
This is the server that runs the package management and download processes.
We can download in parallel by spawning multiple instances of the downloadPackage function.
Keep track of downloaded packages in here, rather than downloading the JSON every time we run dcs-get.
*/

// Node modules
var 	http = require('http'),
	fs = require('fs'),
	util = require('util'),
	spawn = require('child_process').spawn,
	net = require( 'net' ),
	path = require( 'path' );
	
//Settings for our http/net connections and other things.
var settings = {
	'install_dir': '/var/tmp/dcs-get',
	'base_host': 'backus.uwcs.co.uk',
	'base_path': '/dcs-get/',
	'debug': true,
	'port': 101010
};

// Global variable for packages
var packages;

//Packages being downloaded.
var downloading = {};

//Things to ignore in readdir.
var ignore = new Array( "bin", "lib", "downloads", "downloaded", "cleanup" );

// Grab the package list from backus
http.get({
	host: settings['base_host'],
	port: 80,
	path: settings['base_path']+'packages.json'
}, function(res) {
	res.setEncoding('utf8');
	var data = '';
	res.on('data', function (chunk) {
		data += chunk;
	});
	res.on('end', function () {
		try {
			packages = JSON.parse(data);
			packages = sortObject(packages);
			for (var package in packages) {
				for (var v in packages[package].version) {
	
					//RAAAAAAAAAAAAAGE

					if(path.existsSync(settings.install_dir+'/'+package+'-'+packages[package].version[v])) {
						packages[package].installed = packages[package].version[v];
					}
				}
			}
		} catch (e) {
			console.log("Error: Problem with package data");
			if (settings.debug) console.log(e);
			return;
		}
	});
}).on('error', function(e) {
	console.log("Error: Problem downloading package list from backus");
	if (settings.debug) console.log(e);
});

/*
Create a server that manages downloads and the JSON.
Can now keep track of downloaded packages "live" instead of reading /var/tmp/dcs-get on launch.

Listens for two commands:
INSTALL <foo> installs package foo. Dependencies are handled in the api, not here.
GETJSON returns the packages JSON to the api.
*/


var server = net.createServer( function( stream ) {
	stream.setEncoding('utf8');

	stream.on( 'data', function ( data ) {

		//For testing purposes/niceness: telnet ends with \r\n, socat with \n and we don't want tabs anyway.
		var args = data.toString().replace(/[\n,\r,\t]/,"").split(" ");
		
		switch( args[0] ) {
			case "INSTALL":
				
				//We can assume package names are well-formed.
				var temp = args[1].split("-");
				downloadPackage( args[1], temp[0], temp[1] );
				stream.end();
				break;
				
			case "GETJSON":
				
				stream.end( JSON.stringify( packages ));
				break;
			
			case "DOWNLOADING":
				
				stream.end( JSON.stringify( downloading ) );
				break;
				
			default:
				stream.end( "No such function." );
		}
	});
	stream.on('error', function(err){
		console.log(err);
	});
}).listen(settings['port'], 'localhost');

function downloadPackage( package, packageName, packageVersion ) {
	http.get({
		host: settings['base_host'],
		port: 80,
		path: settings['base_path']+'packages/'+package+'.tar.gz'
	}, function(res) {
		downloading[packageName] = {};
		downloading[packageName].downloaded = 0;
		res.on('data', function (chunk) {
			downloading[packageName].totalSize = Number(res.headers['content-length']);
			downloading[packageName].downloaded += chunk.length;
		});
		res.on('end', function () {
			console.log("Package downloaded");
			packages[packageName].installed = 1;
			delete downloading[packageName];
			fs.rename( settings.install_dir+"/downloads/"+package+".tar.gz", settings.install_dir+"/downloaded/"+package+".tar.gz", function ( err ) {
				if ( err ) console.log( err );
				else {
					console.log( "Installed "+package );
					return true;
				}
			});
		});
		// Save file
		util.pump(res, fs.createWriteStream(settings['install_dir']+'/downloads/'+package+'.tar.gz'));
		// Extract contents
		var tar = spawn('tar', ['zx','-C', settings['install_dir']]);
		util.pump(res, tar.stdin);
		// Calculate md5sum
		var md5sum = spawn('md5sum');
		util.pump(res, md5sum.stdin);
		var md5hash = '';
		md5sum.stdout.on('data', function (chunk) {
			md5hash += chunk;
		})
		md5sum.stdout.on('end', function () {
			console.log("File hash: "+md5hash);
		});
	}).on('error', function(e) {
	        console.log("Error: Problem downloading package.\n"+package+"\n"+packageName+"\n"+packageVersion);
			if (settings.debug) console.log(e);
	});
}

function sortObject(o) {
	var sorted = {},
		key, a = [];

	for (key in o) {
		if (o.hasOwnProperty(key)) {
			a.push(key);
		}
	}

	a.sort();

	for (key = 0; key < a.length; key++) {
		sorted[a[key]] = o[a[key]];
	}
	return sorted;
}
